/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-06-23 02:07:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.logging.*;
import com.nexacro.xapi.data.*;
import com.nexacro.xapi.tx.*;
import java.util.*;
import java.sql.*;
import java.io.*;

public final class employees_005fselect_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 

public static String EucToUni(String s) 
{
    String result = "";

    try {
        //result = new String(s.getBytes("8859_1"), "EUC-KR");
        result = new String(s.getBytes("8859_1"), "UTF-8");
    } catch(Exception e) {
        System.out.println(e);
    }
    return result;
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("com.nexacro.xapi.tx");
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.nexacro.xapi.data");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.apache.commons.logging");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');


// PlatformData
PlatformData out_PlatformData = new PlatformData();
    
int    nErrorCode  = 0;
String strErrorMsg = "START";

try {    
    /******* JDBC Connection *******/
    Connection conn = null;
    Statement  stmt = null;
    ResultSet  rs   = null;
    
    try { 
       	// Class.forName("org.sqlite.JDBC");
        // conn = DriverManager.getConnection("jdbc:sqlite:C:\\Tomcat 7.0\\webapps\\edu\\Local_Edu.db3");
        
		Class.forName("oracle.jdbc.driver.OracleDriver");
    	
		// conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "scott", "tiger");
		conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.0.3:1521:XE", "scott", "tiger");
        
    	
        stmt = conn.createStatement();
      
        /******* SQL ************/
        String sChk = request.getParameter("sChk");
		System.out.println(sChk); 
		
        String search = request.getParameter("search");
		System.out.println(search); 
		
        String SQL;
        if( search.equals("") == true ) {
            SQL = "SELECT * FROM EMPLOYEES";
        }
        
        if ( sChk.equals("01") == true ) {
        	SQL = "SELECT * FROM EMPLOYEES WHERE EMPL_ID like '%" + search + "%'";
        }
        else {
        	SQL = "SELECT * FROM EMPLOYEES WHERE FULL_NAME like '%" + search + "%'";
        }
        /*
        if ( sChk == "01" ) {
        	SQL = "SELECT * FROM EMPLOYEES WHERE EMPL_ID like '%" + search + "%'";
        }
        else {
        	SQL = "SELECT * FROM EMPLOYEES WHERE FULL_NAME like '%" + search + "%'";
        }
        */
        /*
        else if ( search.equals("") != true ) {
            // SQL = "SELECT * FROM EMPLOYEES WHERE FULL_NAME like '%" + search + "%'";
            // SQL = "SELECT * FROM EMPLOYEES WHERE FULL_NAME like '%" + search + "%' OR EMPL_ID like '%" + search + "%'";
            // SQL = "SELECT * FROM EMPLOYEES WHERE EMPL_ID like '%" + search + "%' OR FULL_NAME like '%" + search + "%'";
            // SQL = "SELECT * FROM EMPLOYEES WHERE EMPL_ID like '%" + search + "%' OR FULL_NAME like '%" + search + "%'";
            SQL = "SELECT * FROM EMPLOYEES WHERE EMPL_ID like '%" + search + "%'";
        }
        else {
        	SQL = "SELECT * FROM EMPLOYEES WHERE FULL_NAME like '%" + search + "%'";
        }
        */
        
        
        System.out.println(SQL);
        
        rs = stmt.executeQuery(SQL);
      
        /********* Dataset **********/    
        // DataSet ds = new DataSet("ds_employees");
        DataSet ds = new DataSet("ds_emp");
      
        ds.addColumn("EMPL_ID"   ,DataTypes.STRING  ,(short)10   );
        ds.addColumn("FULL_NAME" ,DataTypes.STRING  ,(short)50   );
        ds.addColumn("HIRE_DATE" ,DataTypes.STRING  ,(short)30   );
        ds.addColumn("MARRIED"   ,DataTypes.STRING  ,(short)1    );
        ds.addColumn("SALARY"    ,DataTypes.INT     ,(short)10   );
        ds.addColumn("GENDER"    ,DataTypes.STRING  ,(short)1    );
        ds.addColumn("DEPT_ID"   ,DataTypes.STRING  ,(short)10   );
        ds.addColumn("EMPL_MEMO" ,DataTypes.STRING  ,(short)4000 );
            
        while(rs.next())
        {
            int row = ds.newRow();

            ds.set(row ,"EMPL_ID"    ,rs.getString("EMPL_ID")   );
            ds.set(row ,"FULL_NAME"  ,rs.getString("FULL_NAME") );
            ds.set(row ,"HIRE_DATE"  ,rs.getString("HIRE_DATE") );
            ds.set(row ,"MARRIED"    ,rs.getString("MARRIED")   );
            ds.set(row ,"SALARY"     ,rs.getString("SALARY")    );
            ds.set(row ,"GENDER"     ,rs.getString("GENDER")    );
            ds.set(row ,"DEPT_ID"    ,rs.getString("DEPT_ID")   );
            ds.set(row ,"EMPL_MEMO"  ,rs.getString("EMPL_MEMO") );
        }
          
		// #1 
        out_PlatformData.addDataSet(ds);

		// #2
        //DataSetList dataList = out_PlatformData.getDataSetList();
        //dataList.add(ds);

        nErrorCode  = 0;
        strErrorMsg = "SUCC";
        
    } catch (SQLException e) {
        nErrorCode = -1;
        strErrorMsg = e.getMessage();
    }    
    
    /******** JDBC Close ********/
    if ( stmt != null ) try { stmt.close(); } catch (Exception e) {nErrorCode = -1; strErrorMsg = e.getMessage();}
    if ( conn != null ) try { conn.close(); } catch (Exception e) {nErrorCode = -1; strErrorMsg = e.getMessage();}
            
} catch (Throwable th) {
    nErrorCode = -1;
    strErrorMsg = th.getMessage();
}

VariableList varList = out_PlatformData.getVariableList();
varList.add("ErrorCode", nErrorCode);
varList.add("ErrorMsg" , strErrorMsg);


/*
Variable varErrCD = new Variable("ErrorCode");
varErrCD.set(nErrorCode);

Variable varErrMSG = new Variable("ErrorMsg");
varErrMSG.set(strErrorMsg);

out_PlatformData.addVariable(varErrCD);
out_PlatformData.addVariable(varErrMSG);
*/

HttpPlatformResponse pRes = new HttpPlatformResponse(response, PlatformType.CONTENT_TYPE_XML, "utf-8");
pRes.setData(out_PlatformData);

// Send data
pRes.sendData();

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
